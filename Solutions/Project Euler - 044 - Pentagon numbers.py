# ------------------------------------------------------------------------------
# Project Euler - Problem 044 - Pentagon numbers
# ------------------------------------------------------------------------------
# Problem Link: https://projecteuler.net/problem=044
# ------------------------------------------------------------------------------
# Author: Paul Frisby
# Email: mail@paulfrisby.com
# Github: https://github.com/paulfrisby/
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Problem Definition
# ------------------------------------------------------------------------------
"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of
D?
"""
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Pseudocode
# ------------------------------------------------------------------------------
"""
function to find out if a number, x, is pentagonal:
    use quadratic formula to work out

    since x = n(3n-1)/2, 3/2 n^2 - 1/2 n - x = 0, therefore taking only the
    upper root:
    
    n = -b + sqrt(b^2 - 4ac) / 2a
      = (-(-1/2) + sqrt((-1/2)^2 - 4*(3/2)*(-x))) / (2*(3/2))
      = (1/2 + sqrt(1/4 + 6*x)) / 3

    if n is an integer, x is a pentagonal number


minimumD = infinity
bestPj = 0
bestPk = 0

for each pentagonal number in range:
    for each larger pentagonal number in range:
    
        if sum & difference of these are also pentagonal:
            if difference less than minimumD:
                minimumD = difference between 2 pentagonal numbers
                bestPj = pentagonal number 1
                bestPk = pentagonal number 2


print bestPk - bestPj = minimumD
"""
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Main Code
# ------------------------------------------------------------------------------

from math import sqrt

# returns nth pentagonal number
def nthPentagonal(n):
        return int(n*(3*n-1)/2)


# returns true if input number is pentagonal
def isPentagonal(n):

    # uses quadratic formula to find largest root
    root = (1/2 + sqrt(1/4 + 6*n)) / 3

    # if root is a whole number, n is pentagonal
    if root % 1 == 0:
        return True
    else:
        return False
        

# initialising to infinity so any initially found value will be below it
# this removes need to guess an upper limit
minimumDiff = float('inf')

# to store the 2 pentagonal numbers with the desired property
bestPj = 0
bestPk = 0

for j in range(1, 5000):
    Pj = nthPentagonal(j)
    for k in range(j+1, 5001):
        Pk = nthPentagonal(k)

        pSum = Pj + Pk
        pDiff = Pk - Pj
    
        if isPentagonal(pDiff) and isPentagonal(pSum):
            if pDiff < minimumDiff:
                minimumDiff = pDiff
                bestPj = Pj
                bestPk = Pk


print (f'{bestPk} - {bestPj} = {minimumDiff}')
