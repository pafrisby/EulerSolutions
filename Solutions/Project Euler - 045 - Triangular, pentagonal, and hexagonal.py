# ------------------------------------------------------------------------------
# Project Euler - Problem 045 - Triangular, pentagonal, and hexagonal
# ------------------------------------------------------------------------------
# Problem Link: https://projecteuler.net/problem=045
# ------------------------------------------------------------------------------
# Author: Paul Frisby
# Email: mail@paulfrisby.com
# Github: https://github.com/paulfrisby/
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Problem Definition
# ------------------------------------------------------------------------------
"""
Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Pseudocode
# ------------------------------------------------------------------------------
"""
n = 144
While true:
    Hn = n(2n-1)
    if Hn is triangular and is pentagonal:
        print Hn
"""
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# How to check if a number is triangular, pentagonal, or hexagonal
# ------------------------------------------------------------------------------
"""
In problem 44 we used the quadratic formula to find the upper root of the
formula to generate pentagonal numbers. We then used this to work out if a given
number was pentagonal.

We can do this for triangular and hexagonal numbers also. Let x be a number,
for each of the following equations, if n is an integer, x is triangular,
pentagonal, or hexagonal respectively.

n = -1/2 + sqrt(1/4 + 6x)

n = (1/2 + sqrt(1/4 + 6*x)) / 3

n = (1 + sqrt(1+8x)) / 4
"""
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Main Code
# ------------------------------------------------------------------------------

from math import sqrt

# returns nth triangular number
def nthTriangular(n):
    return int(n*(n+1)/2)


# returns nth pentagonal number
def nthPentagonal(n):
    return int(n*(3*n-1)/2)


# returns nth hexagonal number
def nthHexagonal(n):
    return int(n*(2*n-1))


# returns true if input number is triangular
def isTriangular(n):
    root = -1/2 + sqrt(1/4 + 2*n)
    return root % 1 == 0


# returns true if input number is pentagonal
def isPentagonal(n):
    root = (1/2 + sqrt(1/4 + 6*n)) / 3
    return root % 1 == 0


# returns true if input number is hexagonal
def isHexagonal(n):
    root = (1 + sqrt(1 + 8*n)) / 4
    return root % 1 == 0


# given Tn, returns n
def nFromTn(Tn):
    return int(-1/2 + sqrt(1/4 + 2*Tn))


# given Pn, returns n
def nFromPn(Pn):
    return int((1/2 + sqrt(1/4 + 6*Pn)) / 3)


# given Hn, returns n
def nFromHn(Hn):
    return int((1 + sqrt(1 + 8*Hn)) / 4)


# Start with 144 as we are looking for the next match after H143
n = 144

while True:
    # iterating over hexagonal numbers so that less overall checks are needed
    # since hexagonal numbers are more spaced out
    Hn = nthHexagonal(n)
    if isPentagonal(Hn) and isTriangular(Hn):
        print (f'T{nFromTn(Hn)} = P{nFromPn(Hn)} = H{n} = {Hn}')
        break
    n += 1
